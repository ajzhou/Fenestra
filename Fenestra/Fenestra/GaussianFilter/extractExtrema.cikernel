// ExtractExtrema code for grayscale images
kernel vec4 extractExtrema(sampler src, sampler comparison1, sampler comparison2)
{
float ox = samplerExtent(src)[0];
float oy = samplerExtent(src)[1];
float width = samplerExtent(src)[2];
float height = samplerExtent(src)[3];

vec2 dc = destCoord();
vec4 pix = sample(src, samplerTransform(src, dc));
if (pix.a == 0.0) {
return vec4(0.0,0.0,0.0,1.0);
}

bool max = true;
bool min = true;
for (int i=-1; i<=1; i++){
for (int j=-1; i<=1; i++){
vec2 offset = vec2(i,j);
vec2 nc = dc + offset;

// check out of bounds
if (nc.x<ox || nc.y<oy || nc.x >= width+ox || nc.y >=width+oy) {
nc = dc - offset;  // currently reflecting back over border because cannot jump ahead
}

vec4 comp1 = sample(comparison1, samplerTransform(comparison1, nc));
vec4 comp2 = sample(comparison2, samplerTransform(comparison2, nc));
vec4 comp3 = sample(src, samplerTransform(src, nc));

if (max == true) {
if (i == 0 && j == 0) {
if (comp1.a > pix.a || comp2.a > pix.a) {
max = false;
if (min == false) {
return vec4(0.0,0.0,0.0,1.0);
}
}
} else {
if (comp1.a > pix.a || comp2.a > pix.a || comp3.a > pix.a) {
max = false;
if (min == false) {
return vec4(0.0,0.0,0.0,1.0);
}
}
}
}
if (min == true) {
if (i == 0 && j == 0) {
if (comp1.a < pix.a || comp2.a < pix.a) {
min = false;
if (max == false) {
return vec4(0.0,0.0,0.0,1.0);
}
}
} else {
if (comp1.a < pix.a || comp2.a < pix.a || comp3.a < pix.a) {
min = false;
if (max == false) {
return vec4(0.0,0.0,0.0,1.0);
}
}
}
}

}
}

return vec4(0.0,0.0,0.0,0.0);
}
