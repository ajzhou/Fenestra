float roundNum(float x){
     if (x < 1.0) return 1.0;
    if (mod(x,1.0) < 0.5) return floor(x);
    return ceil(x);
}

float kernelSum(float sigma, float radius)
{
    float M_PI = 3.1415926535897932384626433832795;
    float sum = 0.0;
    for (float y=-radius; y<=radius; y+=1.0){
        sum += (1.0/(sqrt(2.0 * M_PI) * sigma)) * exp(-1.0 * (y * y) / (2.0 * (sigma * sigma)));
    }
    return sum;
}

float gaussian1D(float y, float sigma, float sum)
{
    float M_PI = 3.1415926535897932384626433832795;
    return (1.0/(sqrt(2.0 * M_PI) * sigma)) * exp(-1.0 * (y * y) / (2.0 * (sigma * sigma))) / sum;
}

kernel vec4 gaussian1Y(sampler image,float sigma,float height,float origin)
{
    float radius = roundNum(sigma * 3.0);
    vec4 s = vec4(0.0);
    vec2 dc = destCoord();
    float sum = kernelSum(sigma, radius);

    for (float y=-radius; y<=radius; y++){
        float g = gaussian1D(float(y),sigma, sum);
        vec2 offset = vec2(0,y);
        vec2 tp = dc + offset;
        if (tp.y < origin || tp.y >= height+origin){
            tp = dc - offset;
        }
        s += sample(image, samplerTransform(image, tp)) * g;
    }

    return s;
}

