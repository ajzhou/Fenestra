float val(vec4 p) {
    if (p.r == 0.0 && p.g == 0.0) return 0.0;
    if (p.r != 0.0) return p.a;
    if (p.g != 0.0) return -p.g;

    return 0.0;
}

kernel vec4 edgeRejection(sampler map, sampler src, float r)
{
    vec4 BLACK = vec4(0.0, 0.0, 0.0, 0.0);

    vec2 dc = destCoord();
    vec4 indicator = sample(map, samplerTransform(map, dc));
    if (indicator.r == 0.0 && indicator.g == 0.0) return BLACK;

    vec4 extent = samplerExtent(src);
    vec4 p      = sample(src, samplerTransform(src, dc));

    // find Dxx
    float xl = dc.x - 1.0;
    if (xl < extent[0]) xl = dc.x + 1.0;
    float xh = dc.x + 1.0;
    if (xh > (extent[0]+extent[2])) xh = dc.x - 1.0;
    vec4 pxl = sample(src, samplerTransform(src, vec2(xl,dc.y)));
    vec4 pxh = sample(src, samplerTransform(src, vec2(xh,dc.y)));

    float Dxx = val(pxl) - (2.0 * val(p)) + val(pxh);

    // find Dyy
    float yl = dc.y - 1.0;
    if (yl < extent[1]) yl = dc.y + 1.0;
    float yh = dc.y + 1.0;
    if (yh > (extent[1]+extent[3])) yh = dc.y - 1.0;
    vec4 pyl = sample(src, samplerTransform(src, vec2(dc.x,yl)));
    vec4 pyh = sample(src, samplerTransform(src, vec2(dc.y,yh)));

    float Dyy = val(pyl) - (2.0 * val(p)) + val(pyh);

    // find Dxy
    vec4 plh = sample(src, samplerTransform(src, vec2(xl,yh)));
    vec4 pll = sample(src, samplerTransform(src, vec2(xl,yl)));
    vec4 phh = sample(src, samplerTransform(src, vec2(xh,yh)));
    vec4 phl = sample(src, samplerTransform(src, vec2(xh,yl)));

    float Dxy = (-val(plh) + val(phh) - val(pll) + val(phl)) / 4.0;

    // find trace and determinant of Hessian
    float trace = Dxx + Dyy;
    float det = Dxx * Dyy - Dxy * Dxy;
    if (det < 0.0) return BLACK;

    // check principal curvature ratio
    float ratio = trace * trace / det;
    float threshold = (r + 1.0) * (r + 1.0) / r;
    if (ratio > threshold) return BLACK;

    return indicator;
}

